// <auto-generated />
using System;
using CakeShop.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CakeShop.DataAccess.Migrations
{
    [DbContext(typeof(CakeDbContext))]
    partial class CakeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CakeShop.Domain.Cake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Cake", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cheesecake is a sweet dessert consisting of one or more layers. The main, and thickest, layer consists of a mixture of a soft, fresh cheese, eggs, and sugar. If there is a bottom layer, it most often consists of a crust or base made from crushed cookies, graham crackers, pastry, or sometimes sponge cake.",
                            Image = "https://www.thespruceeats.com/thmb/r8TCBwuaBBV5oBKc5vXzP7JvllU=/940x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/gluten-free-new-york-cheesecake-1450985-hero-01-dc54f9daf38044238b495c7cefc191fa.jpg",
                            Ingredients = "Cream cheese, soure cream, eggs,biscuits, sugar, cheery",
                            Name = "cheesecake",
                            Price = 650m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Chocolate cake or chocolate gâteau is a cake flavored with melted chocolate, cocoa powder, or both.Chocolate cake is made with chocolate.It can also include other ingredients.These include fudge, vanilla creme, and other sweeteners.",
                            Image = "https://th.bing.com/th/id/OIP.L8n28h8SNmk_9C8OQxXMqAHaJR?pid=ImgDet&rs=1",
                            Ingredients = "Flour,sugar, Chocolate, eggs, milk,vanilla",
                            Name = "Chocolate Cake",
                            Price = 700m
                        },
                        new
                        {
                            Id = 3,
                            Description = "This mousse cake is our homage to the Canadian favourite, just in time for the holidays. It starts with a bottom layer of cake, and includes cream, in lieu of egg whites, to give the mousse better consistency. ",
                            Image = "https://img.taste.com.au/thf4ZgLa/taste/2016/11/top-50-cakes-image-30-66357-1.jpg",
                            Ingredients = "Chocolate biscuits,Butter,Dark Chocolate,Cream,Coffee",
                            Name = "chocolate mousse cake",
                            Price = 350m
                        },
                        new
                        {
                            Id = 4,
                            Description = "A moist and fluffy strawberry cake filled with strawberry and lemon buttercream and crowned with strawberries and buttercream roses",
                            Image = "https://img.taste.com.au/GIR51Wnj/taste/2016/11/top-50-cakes-image-31-66359-1.jpg",
                            Ingredients = "coconut,Lemon Juice,Frozen strawberries,flour,Eggs,Sugar,Milk",
                            Name = "strawberry Cake",
                            Price = 450m
                        },
                        new
                        {
                            Id = 5,
                            Description = "A veggie burger is a hamburger patty that does not contain meat. It may be made from ingredients like beans, A moist and fluffy raspberry cake filled with raspberry and lemon buttercream and crowned with raspberry and buttercream roses",
                            Image = "https://img.taste.com.au/-dGYc9Ej/taste/2016/11/top-50-cakes-image-49-66387-1.jpg",
                            Ingredients = "frozen raspberries,Eggs,Sugar,Almonds",
                            Name = " Raspberry cake",
                            Price = 250m
                        });
                });

            modelBuilder.Entity("CakeShop.Domain.CakeOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CakeId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CakeId");

                    b.HasIndex("CartId");

                    b.ToTable("CakeOrder", (string)null);
                });

            modelBuilder.Entity("CakeShop.Domain.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("FullPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("CakeShop.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CloseAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kaspos",
                            CloseAt = new DateTime(2022, 1, 1, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://images.creativemarket.com/0.1.0/ps/797108/2000/1500/m1/fpnw/wm0/cake-shop-logo-mock-up-1-.jpg?1448176497&s=57e541bc392c59d6b6c6097b57105505",
                            Name = "Cake House",
                            OpenAt = new DateTime(2022, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Centar",
                            CloseAt = new DateTime(2022, 1, 1, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://images.creativemarket.com/0.1.0/ps/797108/2000/1500/m1/fpnw/wm0/cake-shop-logo-mock-up-1-.jpg?1448176497&s=57e541bc392c59d6b6c6097b57105505",
                            Name = "Cake House",
                            OpenAt = new DateTime(2022, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Aerodrom",
                            CloseAt = new DateTime(2022, 1, 1, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://images.creativemarket.com/0.1.0/ps/797108/2000/1500/m1/fpnw/wm0/cake-shop-logo-mock-up-1-.jpg?1448176497&s=57e541bc392c59d6b6c6097b57105505",
                            Name = "Cake House",
                            OpenAt = new DateTime(2022, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Novo Lisice",
                            CloseAt = new DateTime(2022, 1, 1, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://images.creativemarket.com/0.1.0/ps/797108/2000/1500/m1/fpnw/wm0/cake-shop-logo-mock-up-1-.jpg?1448176497&s=57e541bc392c59d6b6c6097b57105505",
                            Name = "Cake House",
                            OpenAt = new DateTime(2022, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Address = "Avtokomanda",
                            CloseAt = new DateTime(2022, 1, 1, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://images.creativemarket.com/0.1.0/ps/797108/2000/1500/m1/fpnw/wm0/cake-shop-logo-mock-up-1-.jpg?1448176497&s=57e541bc392c59d6b6c6097b57105505",
                            Name = "Cake House",
                            OpenAt = new DateTime(2022, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CakeShop.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("LocationId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("CakeShop.Domain.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Quarter",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Half",
                            Price = 600m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Full",
                            Price = 900m
                        });
                });

            modelBuilder.Entity("CakeShop.Domain.CakeOrder", b =>
                {
                    b.HasOne("CakeShop.Domain.Cake", "Cake")
                        .WithMany()
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeShop.Domain.Cart", "Cart")
                        .WithMany("CakeOrders")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("CakeShop.Domain.Order", b =>
                {
                    b.HasOne("CakeShop.Domain.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeShop.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CakeShop.Domain.Cart", b =>
                {
                    b.Navigation("CakeOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
